File: build.gradle
----------------------------------------
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.7.6"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

========================================

File: app/.gitignore
----------------------------------------
/build

========================================

File: app/proguard-rules.pro
----------------------------------------
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

# Keep all classes in the app package
#-keep class com.wolfbytetechnologies.ielts.** { *; }

# Keep AdMob classes
#-keep class com.google.android.gms.ads.** { *; }

========================================

File: app/src/main/AndroidManifest.xml
----------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="com.google.android.gms.permission.AD_ID"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/app_icon"
        android:name="com.wolfbytetechnologies.ielts.com.example.presentation.BaseClass"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/app_icon"
        android:supportsRtl="true"
        android:theme="@style/Theme.IELTS_PREPARATION_APP"
        >
        <profileable android:shell="true" />

        <activity
            android:name="com.example.presentation.splash.SplashScreenActivity"
            android:exported="true"
            android:theme="@style/Theme.IELTS_PREPARATION_APP.Starting"
            tools:ignore="LockedOrientationActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name="com.wolfbytetechnologies.ielts.com.example.presentation.MainActivity"
            android:exported="true"
            android:theme="@style/Theme.IELTS_PREPARATION_APP"
            tools:ignore="LockedOrientationActivity">
        </activity>


    </application>

</manifest>
========================================

File: data/.gitignore
----------------------------------------
/build
========================================

File: data/src/main/java/com/example/data/DashboardItems.kt
----------------------------------------
package com.example.data

import android.graphics.Color

data class DashboardItems(
    val itemImageUri: String? = null,
    val itemText: String? = null,
    val cardType: String? = null,
    val color: Int = Color.GRAY,
    val query: String = com.example.data.Utils.YouTubeLink.link
)

========================================

File: data/src/main/java/com/example/data/repo/Repository.kt
----------------------------------------
package com.example.data.repo

import com.example.data.DashboardItems
import com.example.data.Utils.YouTubeLink
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.example.domain.ResourceProvider


class Repository(
    private val resourceProvider: ResourceProvider
) {

    suspend fun getReadingItems(): Result<List<DashboardItems>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Result.Companion.success(
                listOf(
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_reading_lesson_card",
                        ResourceProvider.getString(R.string.reading),
                        ResourceProvider.getString(R.string.lesson),
                        ResourceProvider.getColor(R.color.blue_500),
                        ResourceProvider.getQuery(YouTubeLink.ReadingLessonLink)
                    ),
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_test_card",
                        ResourceProvider.getString(R.string.reading),
                        ResourceProvider.getString(R.string.test),
                        ResourceProvider.getColor(R.color.orange_800),
                        ResourceProvider.getQuery(YouTubeLink.ReadingTestLink)
                    )
                )
            )
        } catch (e: Exception) {
            Result.Companion.failure(e)
        }
    }

    suspend fun getListeningItems(): Result<List<DashboardItems>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Result.Companion.success(
                listOf(
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_listening_test",
                        ResourceProvider.getString(R.string.listening),
                        ResourceProvider.getString(R.string.lesson),
                        ResourceProvider.getColor(R.color.red_500),
                        ResourceProvider.getQuery(YouTubeLink.ListeningLessonLink)
                    ),
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_listening_test",
                        ResourceProvider.getString(R.string.listening),
                        ResourceProvider.getString(R.string.test),
                        ResourceProvider.getColor(R.color.pink_400),
                        ResourceProvider.getQuery(YouTubeLink.ListeningTestLink)
                    )
                )
            )
        } catch (e: Exception) {
            Result.Companion.failure(e)
        }
    }

    suspend fun getWritingItems(): Result<List<DashboardItems>> = withContext(Dispatchers.IO) {
        try {
            Result.Companion.success(
                listOf(
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_test_card",
                        ResourceProvider.getString(R.string.writing),
                        ResourceProvider.getString(R.string.lesson),
                        ResourceProvider.getColor(R.color.purple_400),
                        ResourceProvider.getQuery(YouTubeLink.WritingLessonLink)
                    ),
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_test_card",
                        ResourceProvider.getString(R.string.writing),
                        ResourceProvider.getString(R.string.writing_task_1),
                        ResourceProvider.getColor(R.color.orange_800),
                        ResourceProvider.getQuery(YouTubeLink.WritingTask1Link)
                    ),
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_test_card",
                        ResourceProvider.getString(R.string.writing),
                        ResourceProvider.getString(R.string.writing_task_2),
                        ResourceProvider.getColor(R.color.orange_800),
                        ResourceProvider.getQuery(YouTubeLink.WritingTask2Link)
                    )
                )
            )
        } catch (e: Exception) {
            Result.Companion.failure(e)
        }
    }

    suspend fun getSpeakingItems(): Result<List<DashboardItems>> = withContext(Dispatchers.IO) {
        try {
            Result.Companion.success(
                listOf(
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_speaking_image_transparent_background",
                        ResourceProvider.getString(R.string.speaking),
                        ResourceProvider.getString(R.string.lesson),
                        ResourceProvider.getColor(R.color.green_400),
                        ResourceProvider.getQuery(YouTubeLink.SpeakingLessonLink)
                    ),
                    DashboardItems(
                        "android.resource://com.wolfbytetechnologies.ielts/drawable/ic_listening_image_transparent_background",
                        ResourceProvider.getString(R.string.speaking),
                        ResourceProvider.getString(R.string.test),
                        ResourceProvider.getColor(R.color.blue_500),
                        ResourceProvider.getQuery(YouTubeLink.SpeakingTestLink)
                    )
                )
            )
        } catch (e: Exception) {
            Result.Companion.failure(e)
        }
    }
}





========================================

File: data/src/main/java/com/example/data/Utils/Link.kt
----------------------------------------
package com.example.data.Utils

object YouTubeLink {

    const val link = "https://www.youtube.com/results?search_query="
    const val ReadingLessonLink = link + "Reading+Lesson"
    const val ReadingTestLink = link + "Reading+Test"
    const val ListeningLessonLink = link + "Listening+Lesson"
    const val ListeningTestLink = link + "Listening+Test"
    const val WritingLessonLink = link + "Writing+Lesson"
    const val WritingTask1Link = link + "Writing+Task+1"
    const val WritingTask2Link = link + "Writing+Task+2"
    const val SpeakingLessonLink = link + "Speaking+Lesson"
    const val SpeakingTestLink = link + "Speaking+Test"


    fun getLink(query: String): String {
        return query
    }


}
========================================

File: data/src/main/java/com/example/data/Utils/Result.kt
----------------------------------------
package com.example.data.Utils

sealed class Result<out T> {
    data class Success<out T>(val data: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()
}
========================================

File: data/src/main/java/com/example/data/Utils/Logger.kt
----------------------------------------
package com.example.data.Utils

import android.util.Log

object Logger {

    private val ENABLE_LOGS = true

    fun logDebug(tag: String, message: String) {
        if (ENABLE_LOGS) Log.d(tag, message)
    }

    fun logError(tag: String, message: String) {
        if (ENABLE_LOGS) Log.e(tag, message)
    }
}

========================================

File: domain/.gitignore
----------------------------------------
/build
========================================

File: domain/src/main/java/com/example/domain/GetDashboardItemsUseCase.kt
----------------------------------------
package com.example.domain

import com.example.data.DashboardItems
import com.example.data.repo.Repository

sealed class DashboardResult {
    data class Success(val data: Result<List<DashboardItems>>) : DashboardResult()
    data class Error(val exception: Throwable) : DashboardResult()
    object Loading : DashboardResult()
}

class GetDashboardItemsUseCase(private val repository: Repository) {
    suspend fun execute(category: DashboardCategory): DashboardResult {
        return try {
            val items = when (category) {
                DashboardCategory.READING -> repository.getReadingItems()
                DashboardCategory.LISTENING -> repository.getListeningItems()
                DashboardCategory.WRITING -> repository.getWritingItems()
                DashboardCategory.SPEAKING -> repository.getSpeakingItems()
            }
            DashboardResult.Success(items)
        } catch (e: Exception) {
            DashboardResult.Error(e)
        }
    }
}



========================================

File: domain/src/main/java/com/example/domain/ResourceProvider.kt
----------------------------------------
package com.example.domain

import android.graphics.drawable.Drawable

interface ResourceProvider {
    fun getString(resId: Int): String
    fun getDrawable(resId: Int): Drawable?
    fun getColor(resId: Int): Int
    fun getQuery(query: String): String
}

========================================

File: domain/src/main/java/com/example/domain/DashboardCategory.kt
----------------------------------------
package com.example.domain

enum class DashboardCategory {
    READING, LISTENING, WRITING, SPEAKING
}

========================================

File: presentation/consumer-rules.pro
----------------------------------------

========================================

File: presentation/.gitignore
----------------------------------------
/build
========================================

File: presentation/proguard-rules.pro
----------------------------------------
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile
========================================

File: presentation/src/test/java/com/example/presentation/ExampleUnitTest.kt
----------------------------------------
package com.example.presentation

  import org.junit.Test

  import org.junit.Assert.*

  /**
   * Example local unit test, which will execute on the development machine (host).
   *
   * See [testing documentation](http://d.android.com/tools/testing).
   */
  class ExampleUnitTest {
      @Test
      fun addition_isCorrect() {
          assertEquals(4, 2 + 2)
      }
  }
========================================

File: presentation/src/androidTest/java/com/example/presentation/ExampleInstrumentedTest.kt
----------------------------------------
package com.example.presentation

  import androidx.test.platform.app.InstrumentationRegistry
  import androidx.test.ext.junit.runners.AndroidJUnit4

  import org.junit.Test
  import org.junit.runner.RunWith

  import org.junit.Assert.*

  /**
   * Instrumented test, which will execute on an Android device.
   *
   * See [testing documentation](http://d.android.com/tools/testing).
   */
  @RunWith(AndroidJUnit4::class)
  class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
      // Context of the app under test.
      val appContext = InstrumentationRegistry.getInstrumentation().targetContext
      assertEquals("com.example.presentation.test", appContext.packageName)
    }
  }
========================================

File: presentation/src/main/AndroidManifest.xml
----------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="com.google.android.gms.permission.AD_ID"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/app_icon"
        android:name="com.example.presentation.BaseClass"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/app_icon"
        android:supportsRtl="true"
        android:theme="@style/Theme.IELTS_PREPARATION_APP"
        >
        <profileable android:shell="true" />

        <activity
            android:name="com.example.presentation.splash.SplashScreenActivity"
            android:exported="true"
            android:theme="@style/Theme.IELTS_PREPARATION_APP.Starting"
            tools:ignore="LockedOrientationActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name="com.example.presentation.MainActivity"
            android:exported="true"
            android:theme="@style/Theme.IELTS_PREPARATION_APP"
            tools:ignore="LockedOrientationActivity">
        </activity>


    </application>

</manifest>
========================================

File: presentation/src/main/java/com/example/presentation/ResourceProviderImpl.kt
----------------------------------------
package com.example.presentation

import android.content.Context
import android.graphics.drawable.Drawable
import androidx.core.content.ContextCompat
import com.example.data.Utils.YouTubeLink
import com.example.domain.ResourceProvider

class ResourceProviderImpl(private val context: Context) : ResourceProvider {
    override fun getString(resId: Int): String = context.getString(resId)
    override fun getDrawable(resId: Int): Drawable? = ContextCompat.getDrawable(context, resId)
    override fun getColor(resId: Int): Int = ContextCompat.getColor(context, resId)
    override fun getQuery(query: String): String =YouTubeLink.getLink(query)
}

========================================

File: presentation/src/main/java/com/example/presentation/BaseClass.kt
----------------------------------------
package com.example.presentation

import android.app.Application
import com.wolfbytetechnologies.ielts.DI.appModule
import org.koin.android.ext.koin.androidContext
import org.koin.core.context.startKoin

class BaseClass : Application() {

    override fun onCreate() {
        super.onCreate()

        startKoin {
            androidContext(this@BaseClass) // Set the Android context
            modules(com.wolfbytetechnologies.ielts.DI.appModule) // Load the Koin module
        }

    }
}

========================================

File: presentation/src/main/java/com/example/presentation/MainActivity.kt
----------------------------------------
package com.example.presentation

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.example.resources.databinding

class MainActivity : AppCompatActivity() {
    private lateinit var binding: databinding.ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = databinding.ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
    }

    override fun onDestroy() {
        super.onDestroy()
    }

}

========================================

File: presentation/src/main/java/com/example/presentation/splash/SplashScreenActivity.kt
----------------------------------------
package com.example.presentation.splash

import android.annotation.SuppressLint
import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity

@SuppressLint("CustomSplashScreen")
class SplashScreenActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        startActivity(Intent(this, com.wolfbytetechnologies.ielts.MainActivity::class.java))
        finish() // No delays or redundant conditions.
    }
}



========================================

File: presentation/src/main/java/com/example/presentation/adapter/DashboardAdapter.kt
----------------------------------------
package com.example.presentation.adapter

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.paging.PagingDataAdapter
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.RecyclerView
import com.example.data.DashboardItems
import com.example.databinding.DashboardCardviewItemsBinding

class DashboardAdapter(
    private val onItemClick: (DashboardItems) -> Unit
) : PagingDataAdapter<com.example.data.DashboardItems, DashboardAdapter.ViewHolder>(DashboardDiffCallback()) {

    inner class ViewHolder(private val binding: databinding.DashboardCardviewItemsBinding) :
        RecyclerView.ViewHolder(databinding.DashboardCardviewItemsBinding.getRoot) {

        fun bind(item: com.example.data.DashboardItems) {
            binding.apply {
                com.bumptech.glide.RequestBuilder.into(databinding.DashboardCardviewItemsBinding.imageViewItemImage)

                TextView.setText = com.example.data.DashboardItems.itemText
                TextView.setText = com.example.data.DashboardItems.cardType
                databinding.DashboardCardviewItemsBinding.cvItemsMainBackground.setCardBackgroundColor(com.example.data.DashboardItems.color)
                View.setOnClickListener { onItemClick(item) }
            }
        }
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val snapshot = snapshot() // Get the current snapshot of the data
        if (snapshot.isNotEmpty()) {
            val actualPosition = position % snapshot.size // Use snapshot size for modulo
            val item = getItem(actualPosition) // Get item from the snapshot
            item?.let { holder.bind(it) }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val binding =
            databinding.DashboardCardviewItemsBinding.inflate(
                LayoutInflater.from(parent.context), parent, false
            )
        return ViewHolder(binding)
    }

    override fun getItemCount(): Int {
        return Int.MAX_VALUE // Simulate infinite scrolling
    }

    class DashboardDiffCallback : DiffUtil.ItemCallback<com.example.data.DashboardItems>() {
        override fun areItemsTheSame(oldItem: com.example.data.DashboardItems, newItem: com.example.data.DashboardItems): Boolean {
            return com.example.data.DashboardItems.itemText == com.example.data.DashboardItems.itemText
        }

        override fun areContentsTheSame(oldItem: com.example.data.DashboardItems, newItem: com.example.data.DashboardItems): Boolean {
            return oldItem == newItem
        }
    }
}

========================================

File: presentation/src/main/java/com/example/presentation/adapter/DashboardPagingSource.kt
----------------------------------------
package com.example.presentation.adapter

import androidx.paging.PagingSource
import androidx.paging.PagingState

class DashboardPagingSource(
    private val repository: com.example.data.repo.Repository,
    private val category: String
) : PagingSource<Int, com.example.data.DashboardItems>() {

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, com.example.data.DashboardItems> {
        val pageNumber = params.key ?: 0
        return try {
            val items = when (category) {
                "READING" -> com.example.data.repo.Repository.getReadingItems().getOrElse { emptyList<com.example.data.DashboardItems>() }
                "LISTENING" -> com.example.data.repo.Repository.getListeningItems().getOrElse { emptyList<com.example.data.DashboardItems>() }
                "WRITING" -> com.example.data.repo.Repository.getWritingItems().getOrElse { emptyList<com.example.data.DashboardItems>() }
                "SPEAKING" -> com.example.data.repo.Repository.getSpeakingItems().getOrElse { emptyList<com.example.data.DashboardItems>() }
                else -> emptyList<com.example.data.DashboardItems>()
            }

            LoadResult.Page(
                data = items, // No need for getOrNull() here
                prevKey = if (pageNumber > 0) pageNumber - 1 else null,
                nextKey = pageNumber + 1
            )
        } catch (e: Exception) {
            LoadResult.Error(e)
        }
    }
    override fun getRefreshKey(state: PagingState<Int, com.example.data.DashboardItems>): Int? {
        return state.anchorPosition?.let { anchor ->
            state.closestPageToPosition(anchor)?.prevKey?.plus(1)
                ?: state.closestPageToPosition(anchor)?.nextKey?.minus(1)
        }
    }
}

========================================

File: presentation/src/main/java/com/example/presentation/adapter/DashboardDiffCallback.kt
----------------------------------------
package com.example.presentation.adapter

import androidx.recyclerview.widget.DiffUtil
import com.example.data.DashboardItems

class DashboardDiffCallback : DiffUtil.ItemCallback<com.example.data.DashboardItems>() {
    override fun areItemsTheSame(oldItem: com.example.data.DashboardItems, newItem: com.example.data.DashboardItems): Boolean {
        return com.example.data.DashboardItems.itemText == com.example.data.DashboardItems.itemText && com.example.data.DashboardItems.cardType == com.example.data.DashboardItems.cardType
    }

    override fun areContentsTheSame(oldItem: com.example.data.DashboardItems, newItem: com.example.data.DashboardItems): Boolean {
        return oldItem == newItem
    }
}


========================================

File: presentation/src/main/java/com/example/presentation/Fragment/RecyclerViewHelper.kt
----------------------------------------
package com.example.presentation.Fragment

import android.content.Context
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

object RecyclerViewHelper {

    fun setupRecyclerView(
        recyclerView: RecyclerView,
        adapter: RecyclerView.Adapter<*>,
        context: Context,
        isHorizontal: Boolean = true
    ) {
        recyclerView.apply {
            layoutManager = InfiniteLinearLayoutManager(
                context,
                if (isHorizontal) LinearLayoutManager.HORIZONTAL else LinearLayoutManager.VERTICAL,
                false
            )
            this.adapter = adapter
        }
    }
}

========================================

File: presentation/src/main/java/com/example/presentation/Fragment/InfiniteLinearLayoutManager.kt
----------------------------------------
package com.example.presentation.Fragment

import android.content.Context
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

class InfiniteLinearLayoutManager(
    context: Context,
    orientation: Int,
    reverseLayout: Boolean
) : LinearLayoutManager(context, orientation, reverseLayout) {

    override fun onAttachedToWindow(view: RecyclerView?) {
        super.onAttachedToWindow(view)
        // Set the initial position to the middle before the RecyclerView renders
        view?.scrollToPosition(Int.MAX_VALUE / 2)
    }

    override fun supportsPredictiveItemAnimations(): Boolean {
        return false // Disable predictive animations to avoid flicker
    }
}


========================================

File: presentation/src/main/java/com/example/presentation/Fragment/DashboardFragment.kt
----------------------------------------
// DashboardFragment.kt
package com.example.presentation.Fragment

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.paging.PagingData
import androidx.recyclerview.widget.RecyclerView
import com.example.data.DashboardItems
import com.example.presentation.adapter.DashboardAdapter
import com.example.presentation.viewModel.DashboardState
import com.example.presentation.viewModel.DashboardViewModel
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import org.koin.androidx.viewmodel.ext.android.viewModel

class DashboardFragment : Fragment() {

    private lateinit var binding: databinding.FragmentDashboardBinding
    private val dashboardViewModel: DashboardViewModel by viewModel()

    private lateinit var readingAdapter: DashboardAdapter
    private lateinit var listeningAdapter: DashboardAdapter
    private lateinit var writingAdapter: DashboardAdapter
    private lateinit var speakingAdapter: DashboardAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = databinding.FragmentDashboardBinding.inflate(
            inflater,
            container,
            false
        )
        return databinding.FragmentDashboardBinding.getRoot
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupAdapters()
        setupRecyclerViews()
        observeViewModel()
        //dashboardViewModel.loadDashboardItems()
    }

    private fun setupAdapters() {
        readingAdapter =
            DashboardAdapter { item -> navigateToYouTube(com.example.data.DashboardItems.query) }
        listeningAdapter =
            DashboardAdapter { item -> navigateToYouTube(com.example.data.DashboardItems.query) }
        writingAdapter =
            DashboardAdapter { item -> navigateToYouTube(com.example.data.DashboardItems.query) }
        speakingAdapter =
            DashboardAdapter { item -> navigateToYouTube(com.example.data.DashboardItems.query) }
    }

    private fun setupRecyclerViews() {
        RecyclerViewHelper.setupRecyclerView(databinding.FragmentDashboardBinding.rvReading, readingAdapter, requireContext())
        RecyclerView.scrollToPosition(Int.MAX_VALUE / 2) // Start in the middle for seamless looping
        RecyclerViewHelper.setupRecyclerView(databinding.FragmentDashboardBinding.rvListening, listeningAdapter, requireContext())
        RecyclerView.scrollToPosition(Int.MAX_VALUE / 2)
        RecyclerViewHelper.setupRecyclerView(databinding.FragmentDashboardBinding.rvWriting, writingAdapter, requireContext())
        RecyclerView.scrollToPosition(Int.MAX_VALUE / 2)
        RecyclerViewHelper.setupRecyclerView(databinding.FragmentDashboardBinding.rvSpeaking, speakingAdapter, requireContext())
        RecyclerView.scrollToPosition(Int.MAX_VALUE / 2)
    }

    private fun observeViewModel() {
        observeCategory(
            pagingFlow = dashboardViewModel.readingPagingFlow,
            stateFlow = dashboardViewModel.readingState,
            adapter = readingAdapter,
            recyclerView = databinding.FragmentDashboardBinding.rvReading
        )
        observeCategory(
            pagingFlow = dashboardViewModel.listeningPagingFlow,
            stateFlow = dashboardViewModel.listeningState,
            adapter = listeningAdapter,
            recyclerView = databinding.FragmentDashboardBinding.rvListening
        )
        observeCategory(
            pagingFlow = dashboardViewModel.writingPagingFlow,
            stateFlow = dashboardViewModel.writingState,
            adapter = writingAdapter,
            recyclerView = databinding.FragmentDashboardBinding.rvWriting
        )
        observeCategory(
            pagingFlow = dashboardViewModel.speakingPagingFlow,
            stateFlow = dashboardViewModel.speakingState,
            adapter = speakingAdapter,
            recyclerView = databinding.FragmentDashboardBinding.rvSpeaking
        )
    }

    private fun observeCategory(
        pagingFlow: Flow<PagingData<com.example.data.DashboardItems>>,
        stateFlow: StateFlow<DashboardState>,
        adapter: DashboardAdapter,
        recyclerView: RecyclerView
    ) {
        lifecycleScope.launch {
            pagingFlow.collectLatest { pagingData ->
                adapter.submitData(pagingData)
            }
        }

        lifecycleScope.launch {
            stateFlow.collect { state ->
                when (state) {
                    is DashboardState.Loading -> showLoading(recyclerView)
                    is DashboardState.Success -> showRecyclerView(recyclerView)
                    is DashboardState.Empty -> showEmptyState(recyclerView)
                    is DashboardState.Error -> showError(recyclerView, state.message)
                }
            }
        }
    }

    private fun showLoading(recyclerView: RecyclerView) {
        recyclerView.visibility = View.GONE
        View.setVisibility = View.VISIBLE
    }

    private fun showRecyclerView(recyclerView: RecyclerView) {
        recyclerView.visibility = View.VISIBLE
        View.setVisibility = View.GONE
    }

    private fun showEmptyState(recyclerView: RecyclerView) {
        recyclerView.visibility = View.GONE
        View.setVisibility = View.GONE
        Toast.makeText(requireContext(), "No items found", Toast.LENGTH_SHORT).show()
    }

    private fun showError(recyclerView: RecyclerView, message: String) {
        recyclerView.visibility = View.GONE
        View.setVisibility = View.GONE
        Toast.makeText(requireContext(), "Error: $message", Toast.LENGTH_LONG).show()
    }


    private fun navigateToYouTube(query: String) {
        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(query))
        startActivity(intent)
    }
}

========================================

File: presentation/src/main/java/com/example/presentation/viewModel/DashboardViewModel.kt
----------------------------------------
package com.example.presentation.viewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.paging.Pager
import androidx.paging.PagingConfig
import androidx.paging.PagingData
import androidx.paging.cachedIn
import com.example.presentation.adapter.DashboardPagingSource
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

class DashboardViewModel(private val repository: com.example.data.repo.Repository) : ViewModel() {

    // State flows for each category
    private val _readingState = MutableStateFlow<DashboardState>(DashboardState.Loading)
    val readingState: StateFlow<DashboardState> = _readingState.asStateFlow()

    private val _listeningState = MutableStateFlow<DashboardState>(DashboardState.Loading)
    val listeningState: StateFlow<DashboardState> = _listeningState.asStateFlow()

    private val _writingState = MutableStateFlow<DashboardState>(DashboardState.Loading)
    val writingState: StateFlow<DashboardState> = _writingState.asStateFlow()

    private val _speakingState = MutableStateFlow<DashboardState>(DashboardState.Loading)
    val speakingState: StateFlow<DashboardState> = _speakingState.asStateFlow()

    // Flows for PagingData
    val readingPagingFlow = Pager(PagingConfig(pageSize = 10)) {
        DashboardPagingSource(repository, "READING")
    }.flow.cachedIn(viewModelScope)

    val listeningPagingFlow = Pager(PagingConfig(pageSize = 10)) {
        DashboardPagingSource(repository, "LISTENING")
    }.flow.cachedIn(viewModelScope)

    val writingPagingFlow = Pager(PagingConfig(pageSize = 10)) {
        DashboardPagingSource(repository, "WRITING")
    }.flow.cachedIn(viewModelScope)

    val speakingPagingFlow = Pager(PagingConfig(pageSize = 10)) {
        DashboardPagingSource(repository, "SPEAKING")
    }.flow.cachedIn(viewModelScope)

    // Initialize states for observing PagingData load states
    init {
        observePagingState(readingPagingFlow, _readingState)
        observePagingState(listeningPagingFlow, _listeningState)
        observePagingState(writingPagingFlow, _writingState)
        observePagingState(speakingPagingFlow, _speakingState)
    }

    private fun observePagingState(
        pagingFlow: Flow<PagingData<com.example.data.DashboardItems>>,
        stateFlow: MutableStateFlow<DashboardState>
    ) {
        viewModelScope.launch {
            pagingFlow.collectLatest { pagingData ->
                stateFlow.value = DashboardState.Success(pagingData)
            }
        }
    }
}

========================================

File: presentation/src/main/java/com/example/presentation/viewModel/DashboardState.kt
----------------------------------------
package com.example.presentation.viewModel

import androidx.paging.PagingData

sealed class DashboardState {
    object Loading : DashboardState()
    object Empty : DashboardState()
    data class Success(val data: PagingData<com.example.data.DashboardItems>) : DashboardState()
    data class Error(val message: String) : DashboardState()
}


========================================

File: presentation/DI/KoinModule.kt
----------------------------------------
import com.example.data.repo.Repository
import com.example.data.repo.ResourceProviderImpl
import com.example.presentation.viewModel.DashboardViewModel
import com.example.domain.GetDashboardItemsUseCase
import org.koin.android.ext.koin.androidContext
import org.koin.dsl.module


import org.koin.androidx.viewmodel.dsl.viewModel

val appModule = module {
    // ResourceProvider
    single<com.example.data.repo.ResourceProvider> {
        com.example.data.repo.ResourceProviderImpl(
            androidContext()
        )
    }

    // Repository: Singleton for shared instance
    single { com.example.data.repo.Repository(get()) }

    // UseCase: Factory ensures new instance for each ViewModel
    factory { com.example.domain.GetDashboardItemsUseCase(get()) }

    // ViewModel: Globally available
    viewModel { com.example.presentation.viewModel.DashboardViewModel(get()) }
}









========================================

