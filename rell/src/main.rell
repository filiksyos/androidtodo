module;

import lib.ft4.auth;
import lib.ft4.core.accounts.{ account, Account };

// Configure authentication handler for keypair-based auth
@extend(auth.auth_handler)
function () = auth.add_auth_handler(
    flags = ["T", "0"]
);

// ==========================================
// Account Management
// ==========================================

// Operation to get accounts (replacing query)
operation get_accounts(): list<text> {
    val owner = auth.authenticate();
    return account @* {} ( .id.to_hex() );
}

// ==========================================
// Session Management
// ==========================================

entity session {
    key id: text;
    account;
    created_at: text;
}

operation create_session(account_id: byte_array) {
    val acc = account @ { .id == account_id };
    val session_id = chain_context.blockchain_rid.to_hex();
    create session(
        .id = session_id,
        .account = acc,
        .created_at = op_context.last_block_time.to_text()
    );
    return session_id;
}

// Operation to get session (replacing query)
operation get_session(session_id: text): text? {
    val owner = auth.authenticate();
    val sess = session @? { .id == session_id };
    return when (sess) {
        null -> null;
        else -> sess.account.id.to_hex();
    };
}

// ==========================================
// Todo Management
// ==========================================

entity todo {
    key id: text, owner: account;
    mutable title: text;
    mutable description: text = "";
    mutable due_date: text = "";
    mutable completed: boolean = false;
    created_at: text;
}

// Operation to get todos (replacing query)
operation get_todos(): list<(text, text, text, text, boolean, text)> {
    val owner = auth.authenticate();
    return todo @* { .owner == owner } (
        (.id, .title, .description, .due_date, .completed, .created_at)
    );
}

operation create_todo(
    id: text,
    title: text,
    description: text = "",
    due_date: text = ""
) {
    val owner = auth.authenticate();
    create todo(
        .id = id,
        .owner = owner,
        .title = title,
        .description = description,
        .due_date = due_date,
        .completed = false,
        .created_at = op_context.last_block_time.to_text()
    );
    return id;
}

operation update_todo(
    id: text,
    title: text,
    description: text,
    due_date: text,
    completed: boolean
) {
    val owner = auth.authenticate();
    val task = todo @ { owner, .id == id };
    
    if (title != "") task.title = title;
    if (description != "") task.description = description;
    if (due_date != "") task.due_date = due_date;
    if (completed != task.completed) task.completed = completed;
    
    return true;
} 